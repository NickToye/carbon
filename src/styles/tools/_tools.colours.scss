// Tools :: Colours

@function carbon-color($key: 'primary') {
  @if map-has-key($carbon-colors, $key) {
    @return map-get($carbon-colors, $key);
  }
  @error "Invalid color name: `#{$key}`.";
}

$carbon-color-dark: carbon-color(dark-grey);
$carbon-color-light: carbon-color('white');

@mixin carbon-contrast($n) {
  $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);

  @if abs($color-brightness) < ($light-color/2) {
    color: $carbon-color-light;
  }
  @else {
    color: $carbon-color-dark;
  }
}

@function carbon-get-tint($carbon-value, $tone-key) {
  @return carbon-tint($carbon-value, $tone-key);
}
@function carbon-get-shade($carbon-value, $tone-key) {
  @return carbon-shade($carbon-value, $tone-key);
}

@function carbon-tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

@function carbon-shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}

@function carbon-luminance($color) {
  $red: nth($carbon-linear-channel-values, red($color) + 1);
  $green: nth($carbon-linear-channel-values, green($color) + 1);
  $blue: nth($carbon-linear-channel-values, blue($color) + 1);

  @return 0.2126 * $red + 0.7152 * $green + 0.0722 * $blue;
}

@function carbon-contrast($back, $front) {
  $backLum: carbon-luminance($back) + 0.05;
  $foreLum: carbon-luminance($front) + 0.05;

  @return max($backLum, $foreLum) / min($backLum, $foreLum);
}

@function carbon-choose-contrast-color($color) {
  $lightContrast: carbon-contrast($color, carbon-color('white'));
  $darkContrast: carbon-contrast($color, carbon-color('black'));

  @if ($lightContrast > $darkContrast) {
    @return carbon-color('white');
  }
  @else {
    @return carbon-color('dark-grey');
  }
}
